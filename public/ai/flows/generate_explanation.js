// ai/flows/generate_explanation.js

// Import the API key from our central config file
import { GEMINI_API_KEY } from '../page.js';

/**
 * Generates an explanation for a quiz question using the Gemini API.
 * @param {string} questionText The text of the quiz question.
 * @param {string} userAnswer The answer the student provided.
 * @param {string} correctAnswer The correct answer.
 * @returns {Promise<string>} A promise that resolves to the AI-generated explanation.
 */
export async function getAIExplanation(questionText, userAnswer, correctAnswer) {
    const apiKey = GEMINI_API_KEY;
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

    const prompt = `You are a helpful teaching assistant. Explain why the answer to the following multiple-choice question is "${correctAnswer}" and not "${userAnswer}". Keep the explanation clear, concise, and easy for a student to understand. Do not just state the correct answer, but explain the underlying concept.
            
    Question: "${questionText}"`;

    const payload = {
        contents: [{
            parts: [{ "text": prompt }]
        }]
    };

    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            const errorData = await response.json();
            console.error("API Error Response:", errorData);
            throw new Error(`API request failed: ${errorData?.error?.message || response.statusText}`);
        }

        const result = await response.json();
        
        if (result.candidates && result.candidates.length > 0 && result.candidates[0].content.parts[0].text) {
            return result.candidates[0].content.parts[0].text;
        } else {
            if (result.promptFeedback && result.promptFeedback.blockReason) {
                 throw new Error(`Request was blocked. Reason: ${result.promptFeedback.blockReason}`);
            }
            throw new Error("No explanation was generated by the AI.");
        }

    } catch (error) {
        console.error("Error fetching AI explanation:", error);
        // Re-throw the error so the calling function can handle it
        throw error;
    }
}
