// ai/flows/generate_advice.js

import { GEMINI_API_KEY } from '../page.js';

/**
 * Generates personalized study advice based on a student's quiz performance.
 * @param {Object} performanceData An object summarizing performance by subject.
 * @returns {Promise<string>} A promise that resolves to the AI-generated advice.
 */
export async function generateAdviceFromPerformance(performanceData) {
    const apiKey = GEMINI_API_KEY;
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

    // Create a clear summary of the student's performance for the AI
    let performanceSummary = "Here is my performance summary across different subjects:\n";
    for (const subject in performanceData) {
        const avg = Math.round(performanceData[subject].scores.reduce((a, b) => a + b, 0) / performanceData[subject].count);
        performanceSummary += `- Subject: ${subject}, Average Score: ${avg}%\n`;
    }

    const prompt = `
        I am a student using an online learning platform. Based on my quiz performance summary below, act as a friendly and encouraging academic advisor. 
        Provide me with a brief analysis of my strengths and weaknesses. 
        Then, give me 2-3 specific, actionable study tips to help me improve in my weakest areas. 
        Keep the tone positive and motivational. Format your response using Markdown.

        ${performanceSummary}
    `;

    const payload = {
        contents: [{ parts: [{ "text": prompt }] }],
        safetySettings: [
            { "category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
            { "category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
            { "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
            { "category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" }
        ]
    };

    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`API request failed: ${errorData?.error?.message || response.statusText}`);
        }

        const result = await response.json();
        
        if (result.promptFeedback && result.promptFeedback.blockReason) {
             throw new Error(`Request was blocked. Reason: ${result.promptFeedback.blockReason}`);
        }
        
        if (result.candidates && result.candidates.length > 0 && result.candidates[0].content.parts[0].text) {
            return result.candidates[0].content.parts[0].text;
        } else {
            throw new Error("No advice was generated by the AI.");
        }

    } catch (error) {
        console.error("Error generating advice with AI:", error);
        throw error;
    }
}
