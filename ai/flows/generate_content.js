// ai/flows/generate_content.js

import { GEMINI_API_KEY } from '../page.js';

/**
 * Generates a text response from a given conversation history using the Gemini API.
 * @param {Array<Object>} chatHistory The conversation history, e.g., [{ role: 'user', parts: [...] }, { role: 'model', parts: [...] }]
 * @returns {Promise<string>} A promise that resolves to the AI-generated text response.
 */
export async function generateContent(chatHistory) {
    const apiKey = GEMINI_API_KEY;
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`;

    const payload = {
        contents: chatHistory, // Use the entire conversation history for context
        safetySettings: [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            }
        ],
        systemInstruction: {
            parts: [{
                "text": "You are LearnifyAI, a helpful and harmless AI study buddy. Your purpose is to provide clear, accurate, and safe educational explanations. When answering, format your responses for readability. Use Markdown for lists, bold text for key terms, and code blocks for mathematical formulas or code. If a question is ambiguous, ask for clarification. If a question is inappropriate for an educational setting, politely decline to answer and explain that your purpose is to help with learning."
            }]
        }
    };

    try {
        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`API request failed: ${errorData?.error?.message || response.statusText}`);
        }

        const result = await response.json();
        
        if (result.promptFeedback && result.promptFeedback.blockReason) {
             return `I am sorry, but I cannot answer that question. My safety guidelines prevent me from responding to prompts with a "${result.promptFeedback.blockReason}" reason. My purpose is to be a helpful educational assistant.`;
        }
        
        if (result.candidates && result.candidates.length > 0 && result.candidates[0].content.parts[0].text) {
            return result.candidates[0].content.parts[0].text;
        } else {
            throw new Error("No response was generated by the AI.");
        }

    } catch (error) {
        console.error("Error generating content with AI:", error);
        throw error;
    }
}
